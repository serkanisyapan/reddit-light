import { AlertIcon } from "@/components/Icons";
import { Navbar } from "@/components/Navbar";
import { ProfileFeed } from "@/components/ProfileFeed";
import { ProfileFeedQuery } from "@/components/ProfileFeedQuery";
import { api } from "@/utils/api";
import { generateSSGHelper } from "@/utils/ssgHelper";
import { useUser } from "@clerk/nextjs";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";

const FeedPage: NextPage<{ feed: string; username: string }> = ({
  feed,
  username,
}) => {
  const { user } = useUser();
  const { data } = api.profile.getUserProfile.useQuery(
    {
      username,
    },
    { refetchOnWindowFocus: false }
  );
  if (!user || user.username !== username) {
    return (
      <div className="flex h-full w-full flex-col items-center">
        <Navbar />
        <div className="mt-52 flex flex-col items-center justify-center">
          <span className="flex flex-col items-center gap-2">
            <AlertIcon /> You do not have permission to access this page.
          </span>
          <span className="text-white text-opacity-60">
            You can only see your own votes.
          </span>
        </div>
      </div>
    );
  }
  if (!data) return <div>404</div>;

  return (
    <>
      <Head>
        <title>{username} - Profile</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <ProfileFeedQuery username={username} />
      <ProfileFeed userId={data.id} feed={feed} />
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();
  const username = context.params?.slug;
  const feed = context.params?.feed;
  if (typeof username !== "string") throw new Error("No slug found.");
  await ssg.profile.getUserProfile.prefetch({ username });
  return {
    props: {
      trpcState: ssg.dehydrate(),
      feed,
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default FeedPage;
